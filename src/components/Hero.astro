---
import Header from "./Header.astro";
const { url, text, text_color, background_color } = Astro.props;
---

<Header />
<section class="hero">
  <div class="grid_1-1-1">
    <img src="/assets/clamp.svg" alt="Klamme illustration" class="clamp1" />
    <div class="middle">
      <img
        src="/assets/bakkefestwordmark.svg"
        alt="Bakkefest wordmark"
        class="wordmark"
      />

      <!-- countdown sættes ind her og får id'en timer, som vi så kan hive fat i i javascript -->
      <div class="timer-button" id="timer"></div>

      <a href="#pink-pulse" class="scroll-down">
        <div class="container">
          <div class="chevron"></div>
          <div class="chevron"></div>
          <div class="chevron"></div>
        </div>
      </a>
    </div>

    <img src="/assets/clamp.svg" alt="Klamme illustration" class="clamp2" />
  </div>

  <script>
    // jeg opretter en konstant som henter timer elementet fra html'en
    const timer = document.getElementById("timer");

    // jeg opretter en const der sørger for at tallene i nedtællingen altid er to cifre, så teksten har en stabil bredde. (2 bliver til 02)
    const pad = (n) => String(n).padStart(2, "0");

    // datoen for festivalen vælges her
    const countdownDate = new Date("Jul 11, 2025 16:00:00").getTime();

    // opretter interval som kører hvert sekund
    const countdownInterval = setInterval(function () {
      const now = new Date().getTime();
      const distance = countdownDate - now;

      // Beregner dage, timer, minutter og sekunder i millisekunder
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor(
        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
      );
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      // Opdaterer HTML-elementet med nedtælling
      timer.innerHTML = `${pad(days)}d ${pad(hours)}t ${pad(minutes)}m ${pad(seconds)}s`;

      // Hvis tiden er udløbet, vis fast tekst
      if (distance < 0) {
        clearInterval(countdownInterval);
        timer.innerHTML = "00d 00t 00m 00s";
      }
    }, 1000);
  </script>

  <style>
    .timer-button {
      /* monospace for at sørge for at talle har samme bredde og ikke hopper når de skifter */
      font-family: monospace, sans-serif;
      font-variant-numeric: tabular-nums;
      font-weight: 500;
      font-size: 17px;
      color: var(--yellow);
      background-color: var(--pink);
      letter-spacing: 2px;
      width: 350px;
      padding: 8px;
      text-align: center;
      /* teksten skal blive på samme linje og bryder ikke */
      white-space: nowrap;
      /* hvis teksten skulle blive længere end boksen, skjules det overskydende tekst */
      overflow: hidden;
      /* padding og border tælles med i elementets samlede bredde/højde */
      box-sizing: border-box;
      border-radius: 3px;
    }
    .hero {
      background-image: url("/assets/heroimage.webp");
      background-size: cover;
      height: 100vh;
      width: 100%;
      top: 0;
      left: 0;
      z-index: -1;
    }

    .grid_1-1-1 {
      display: grid;
      grid-template-columns: 1fr 3fr 1fr;
      height: 100vh;
      width: 100%;
      position: relative;
      padding: 0 1rem;
    }
    .middle {
      display: flex;
      flex-direction: column;
      place-self: center;
      align-self: center;
      place-items: center;
      gap: 0.5rem;
    }
    .wordmark {
      height: 5rem;
      place-self: center;
      align-self: center;
      margin: 0 auto;
    }

    .clamp1,
    .clamp2 {
      height: 10rem;
      place-self: center;
      align-self: center;
    }

    .clamp2 {
      transform: scaleX(-100%);
    }

    .container {
      position: absolute;
      bottom: 10%;
      left: 50%;
      transform: translateX(-50%);
      width: 24px;
      height: 24px;
    }

    .chevron {
      position: absolute;
      width: 28px;
      height: 2px;
      opacity: 0;
      transform: scale3d(0.5, 0.5, 0.5);
      animation: move 3s ease-out infinite;
    }

    .chevron:first-child {
      animation: move 3s ease-out 1s infinite;
    }

    .chevron:nth-child(2) {
      animation: move 3s ease-out 2s infinite;
    }

    .chevron:before,
    .chevron:after {
      content: " ";
      position: absolute;
      top: 0;
      height: 100%;
      width: 51%;
      background: var(--yellow);
    }

    .chevron:before {
      left: 0;
      transform: skew(0deg, 30deg);
    }

    .chevron:after {
      right: 0;
      width: 50%;
      transform: skew(0deg, -30deg);
    }

    @keyframes move {
      25% {
        opacity: 1;
      }
      33% {
        opacity: 1;
        transform: translateY(30px);
      }
      67% {
        opacity: 1;
        transform: translateY(40px);
      }
      100% {
        opacity: 0;
        transform: translateY(55px) scale3d(0.5, 0.5, 0.5);
      }
    }

    @keyframes pulse {
      to {
        opacity: 1;
      }
    }

    @media (min-width: 600px) {
      .wordmark {
        height: 8rem;
      }
      .clamp1,
      .clamp2 {
        height: 20rem;
      }

      .timer-button {
        margin-top: 10px;
        font-size: 28px;
        padding: 10px;
      }
    }
  </style>
</section>
